#+title: config

* Config
** User Data
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.

#+begin_src emacs-lisp :tangle yes
;; -*- lexical-binding: t; -*-
;;$DOOMDIR/config.el
(setq user-full-name "Pedro Gomez"
      user-mail-address "pedroenrique.gomezb@gmail.com")
#+end_src

** Fonts

Doom exposes five (optional) variables for controlling fonts in Doom:

+ `doom-font' -- the primary font to use
+ `doom-variable-pitch-font' -- a non-monospace font (where applicable)
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
+  presentations or streaming.
+ `doom-unicode-font' -- for unicode glyphs
+ `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:

#+begin_src emacs-lisp :tangle yes
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 16 :weight 'regular)
      doom-variable-pitch-font (font-spec :family "JetBrainsMonoNL Nerd Font" :size 16))
#+end_src

 If you or Emacs can't find your font, use 'M-x describe-font' to look them
 up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
 refresh your font settings. If Emacs still can't find your font, it likely
 wasn't installed correctly. Font issues are rarely Doom issues!

#+end_src
** Editor apperance

*** Doom theme
 There are two ways to load a theme. Both assume the theme is installe and
 available. You can either set `doom-theme' or manually load a theme with the
 `load-theme' function. This is the default:

#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'doom-one)
(setq +org-pretty-mode 1)
#+end_src

*** Frame transparency
Set window transparency
#+begin_src emacs-lisp :tangle yes
;;(doom/set-frame-opacity 95)
(add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src

*** Relative numbers
This determines the style of line numbers in effect. If set to `nil', line
numbers are disable. For relative line numbers, set this to `relative'.
#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type 'relative)
#+end_src

*** Editor
#+begin_src emacs-lisp :tangle yes
(setq lsp-auto-guess-root t)

#+end_src
** Org
*** General
Build src blocks
#+begin_src emacs-lisp :tangle yes
(map! :leader
      :desc "org-babel-tangle" "m B" #'org-babel-tangle)
#+end_src

Set main org location
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq
   org-directory "~/org/"
   org-default-notes-file (expand-file-name "notes.org" org-directory)
   ))
#+end_src

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq
   org-link-abbrev-alist
   '(
     ("google" . "https://google.com/search?q=")
     )))
#+end_src

*** Ligatures
#+begin_src emacs-lisp :tangle yes
(global-prettify-symbols-mode 1)
(setq prettify-symbols-unprettify-at-point t)
(use-package org-pretty-tags
  :demand t
  :config
  (setq org-pretty-tags-surrogate-strings
        (quote
         (("TODO" . " ÔÑå ")
        ("WAIT" . " Ôäå ")
        ("CANCELLED" . " Û∞ú∫ ")
        ("DONE" . "ÔÅù ")
        ("[#A]" . "Ôàû ")
        ("[#B]" . "ÔÄ§ ")
        ("[#C]" . "ÔÉ¥ ")
        ("[ ]" . "ÔÇñ ")
        ("[X]" . "ÔÅÜ ")
        ("[-]" . "Ôâí ")
        ("#+BEGIN_SRC" . "ÔÑ° ")
        ("#+END_SRC" . "‚Äï")
        (":PROPERTIES:" . "Ôáû ")
        (":END:" . "‚Äï")
        ("#+STARTUP:" . "ÔÇÖ ")
        ("#+TITLE: " . "")
        ("#+RESULTS:" . "ÔÄØ ")
        ("#+NAME:" . "ÔÄ´ ")
        ("#+ROAM_TAGS:" . "ÔÄ¨ ")
        ("#+FILETAGS:" . "ÔÄ¨ ")
        ("#+HTML_HEAD:" . "Ôáº ")
        ("#+SUBTITLE:" . "Ôáú ")
        ("#+AUTHOR:" . "ÔÉÄ ")
        (":Effort:" . "ÔÄó ")
        ("SCHEDULED:" . "ÔÅ≥ ")
        ("DEADLINE:" . "ÔÄù ")))
          )
  (org-pretty-tags-global-mode))

(use-package org-fancy-priorities
  :ensure t
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("‚ö†" "‚¨Ü" "‚¨á" "üõè")))

;;(setq-default org-tex-prettify-list
;;      '(
;;        ("TODO" . " ÔÑå ")
;;        ("WAIT" . " Ôäå ")
;;        ("CANCELLED" . " Û∞ú∫ ")
;;        ("DONE" . "ÔÅù ")
;;        ("[#A]" . "Ôàû ")
;;        ("[#B]" . "ÔÄ§ ")
;;        ("[#C]" . "ÔÉ¥ ")
;;        ("[ ]" . "ÔÇñ ")
;;        ("[X]" . "ÔÅÜ ")
;;        ("[-]" . "Ôâí ")
;;        ("#+BEGIN_SRC" . "ÔÑ° ")
;;        ("#+END_SRC" . "‚Äï")
;;        (":PROPERTIES:" . "Ôáû ")
;;        (":END:" . "‚Äï")
;;        ("#+STARTUP:" . "ÔÇÖ ")
;;        ("#+TITLE: " . "")
;;        ("#+RESULTS:" . "ÔÄØ ")
;;        ("#+NAME:" . "ÔÄ´ ")
;;        ("#+ROAM_TAGS:" . "ÔÄ¨ ")
;;        ("#+FILETAGS:" . "ÔÄ¨ ")
;;        ("#+HTML_HEAD:" . "Ôáº ")
;;        ("#+SUBTITLE:" . "Ôáú ")
;;        ("#+AUTHOR:" . "ÔÉÄ ")
;;        (":Effort:" . "ÔÄó ")
;;        ("SCHEDULED:" . "ÔÅ≥ ")
;;        ("DEADLINE:" . "ÔÄù ")))
;;(add-hook 'org-hook-mode 'org-text-prettify-list)
#+end_src
*** Pretty
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-ellipsis " ‚Ü© ")
  (setq org-superstar-headline-bullets-list '("‚óâ" "‚óè" "‚óã" "‚óÜ" "‚óè" "‚óã" "‚óÜ"))
  (setq org-superstar-itembullet-alist '((?+ . ?‚û§) (?- . ?‚ú¶))) ; changes +/- symbols in item lists
  )
#+end_src

*** Agenda

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-agenda-files '("~/org/agenda.org"
                           "~/org/notes.org"
                           "~/.doom.d/config.org"))
  (setq
   org-priority-faces
   '((?A :foreground "#ff6c6b" :weight bold)
     (?B :foreground "#98be65" :weight bold)
     (?C :foreground "#c678dd" :weight bold))
   )
  )
#+end_src

*** Tasks
TODO's config
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq
   org-log-done 'time
   org-todo-keywords           ; Overwrite the default TODO States
   '(
     (sequence
      "TODO(t)"            ; A task that is pending TO DO
      "|"                  ; Separete active and unactive tasks
      "DONE(d)"            ; A task that has been complete
      "CANCELLED(c)"       ; A task thast was cancelle
      ))

   ))
#+end_src

** Load package help
Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loade (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are use.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemente.

(add-hook 'org-mode-hook #'org-modern-mode)
(add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
